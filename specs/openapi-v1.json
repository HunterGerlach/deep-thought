{
  "openapi": "3.1.0",
  "info": {
    "title": "Deep Thought",
    "description": "Deep Thought API",
    "version": "1.0.0"
  },
  "servers":[
    {
      "url":"/v1"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "description": "Endpoint to handle GET requests.\n\nReturns:\n    dict: A dictionary containing an error message.",
        "summary": "Handle Request",
        "operationId": "handle_request__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "description": "Endpoint to handle POST requests for user input.\n\nArgs:\n    request_body: The body of the request containing user input.\n\nReturns:\n    dict: A dictionary containing the bot response.",
        "summary": "Handle Request Post",
        "operationId": "handle_request_post__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HandleRequestPostBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },

    "/api_version_test/": {
      "get": {
        "description": "Test Endpoint for API v1 to read items.\n\nReturns:\n    list: The API current version.",
        "operationId": "read_items_api_version_test__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Read Items"
      }
    },

    "/find_sources": {
      "post": {
        "description": "Endpoint to get embedding sources for a given query.\n\nArgs:\n    request_body: The body of the request containing the query and number of results.\n\nReturns:\n    dict: A dictionary containing the embedding source.",
        "summary": "Get Embedding Source",
        "operationId": "get_embedding_source_find_sources_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Request Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "401": {
            "description": "PostgreSQL connection failed",
            "content": {
              "application/json": {
                "schema": {
                }
              }
            }
          }
        }
      }
    },
    "/ask": {
      "post": {
        "description": "Endpoint to synthesize a response to a user query.\n\nArgs:\n    query: The user query.\n    num_results: The number of results to return.\n    prompt: The prompt to use for the response.\n\nReturns:\n    dict: A dictionary containing the bot response.",
        "summary": "Synthesize Response",
        "operationId": "synthesize_response_ask_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_synthesize_response_ask_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_synthesize_response_ask_post": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          },
          "num_results": {
            "type": "integer",
            "title": "Num Results",
            "default": 3
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          }
        },
        "type": "object",
        "required": ["query"],
        "title": "Body_synthesize_response_ask_post"
      },


      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HandleRequestPostBody": {
        "description": "Class to define the request body for the handle_request_post endpoint.",
        "properties": {
          "user_input": {
            "type": "string",
            "title": "User Input"
          }
        },
        "type": "object",
        "required": ["user_input"],
        "title": "HandleRequestPostBody"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    }
  }
}
